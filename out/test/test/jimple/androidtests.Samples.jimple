public class androidtests.Samples extends java.lang.Object
{

    public int update(android.database.sqlite.SQLiteDatabase, int)
    {
        androidtests.Samples this;
        android.database.sqlite.SQLiteDatabase mDb;
        int updateUserCount, temp$1, temp$2, temp$3;
        boolean updateUser, temp$0;

        this := @this: androidtests.Samples;
        mDb := @parameter0: android.database.sqlite.SQLiteDatabase;
        updateUserCount := @parameter1: int;
        temp$0 = virtualinvoke this.<androidtests.Samples: boolean updateUser(android.database.sqlite.SQLiteDatabase)>(mDb);
        updateUser = temp$0;
        if updateUser == 0 goto label1;

        goto label0;

     label0:
        nop;
        temp$1 = updateUserCount;
        temp$2 = temp$1 + 1;
        updateUserCount = temp$2;
        goto label2;

     label1:
        nop;
        temp$3 = 0;
        updateUserCount = temp$3;

     label2:
        nop;
        virtualinvoke this.<androidtests.Samples: void log(java.lang.String)>("Begin transaction");
        virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: void beginTransaction()>();
        virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>();
        virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: void endTransaction()>();
        return updateUserCount;
    }

    public boolean deleteRow(android.database.sqlite.SQLiteDatabase)
    {
        androidtests.Samples this;
        android.database.sqlite.SQLiteDatabase mDb;
        boolean deletedRow, temp$0, temp$1, temp$2, temp$4;
        int temp$3;

        this := @this: androidtests.Samples;
        mDb := @parameter0: android.database.sqlite.SQLiteDatabase;
        temp$0 = 0;
        deletedRow = temp$0;
        if null != mDb goto label0;

        goto label8;

     label0:
        nop;
        temp$1 = virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();
        if temp$1 == 0 goto label7;

        goto label1;

     label1:
        nop;
        temp$2 = virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();
        if temp$2 == 0 goto label2;

        goto label6;

     label2:
        nop;
        temp$3 = virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("table", "key = user", null);
        if temp$3 > 0 goto label4;

        goto label3;

     label3:
        nop;
        temp$4 = 0;
        goto label5;

     label4:
        nop;
        temp$4 = 1;

     label5:
        nop;
        deletedRow = temp$4;

     label6:
        nop;

     label7:
        nop;

     label8:
        nop;
        return deletedRow;
    }

    public int deleteNUsers(android.database.sqlite.SQLiteDatabase, int)
    {
        androidtests.Samples this;
        android.database.sqlite.SQLiteDatabase mDb;
        int bound, deletedRow, temp$0, i, temp$7, temp$8, temp$9, temp$10, temp$11;
        boolean temp$1, temp$4;
        java.lang.StringBuffer temp$2, temp$5;
        java.lang.String temp$3, temp$6;

        this := @this: androidtests.Samples;
        mDb := @parameter0: android.database.sqlite.SQLiteDatabase;
        bound := @parameter1: int;
        temp$0 = 0;
        deletedRow = temp$0;
        if null != mDb goto label0;

        goto label10;

     label0:
        nop;
        temp$1 = virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: boolean isOpen()>();
        if temp$1 == 0 goto label9;

        goto label1;

     label1:
        nop;
        i = 0;

     label2:
        nop;
        if i <= 10 goto label3;

        goto label8;

     label3:
        nop;
        temp$2 = new java.lang.StringBuffer;
        specialinvoke temp$2.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Deleting user ");
        virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i);
        temp$3 = virtualinvoke temp$2.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<androidtests.Samples: void log(java.lang.String)>(temp$3);
        temp$4 = virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>();
        if temp$4 == 0 goto label4;

        goto label7;

     label4:
        nop;
        temp$5 = new java.lang.StringBuffer;
        specialinvoke temp$5.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("key = ");
        virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i);
        temp$6 = virtualinvoke temp$5.<java.lang.StringBuffer: java.lang.String toString()>();
        temp$7 = virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>("table", temp$6, null);
        if temp$7 > 0 goto label5;

        goto label6;

     label5:
        nop;
        temp$8 = deletedRow;
        temp$9 = temp$8 + 1;
        deletedRow = temp$9;

     label6:
        nop;

     label7:
        nop;
        nop;
        temp$10 = i;
        temp$11 = temp$10 + 1;
        i = temp$11;
        goto label2;

     label8:
        nop;

     label9:
        nop;

     label10:
        nop;
        return deletedRow;
    }

    public void retrieveData(android.database.sqlite.SQLiteDatabase)
    {
        androidtests.Samples this;
        android.database.sqlite.SQLiteDatabase mDb;
        android.database.Cursor c, temp$0;
        int column, temp$1, age, temp$3;
        boolean temp$2, temp$6;
        java.lang.StringBuffer temp$4;
        java.lang.String temp$5;

        this := @this: androidtests.Samples;
        mDb := @parameter0: android.database.sqlite.SQLiteDatabase;
        temp$0 = virtualinvoke mDb.<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>("SELECT * FROM Table", null);
        c = temp$0;
        temp$1 = interfaceinvoke c.<android.database.Cursor: int getColumnIndex(java.lang.String)>("age");
        column = temp$1;
        temp$2 = interfaceinvoke c.<android.database.Cursor: boolean moveToFirst()>();
        if c != null goto label0;

        goto label3;

     label0:
        nop;

     label1:
        nop;
        temp$3 = interfaceinvoke c.<android.database.Cursor: int getInt(int)>(column);
        age = temp$3;
        temp$4 = new java.lang.StringBuffer;
        specialinvoke temp$4.<java.lang.StringBuffer: void <init>()>();
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>("Reading ");
        virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(age);
        temp$5 = virtualinvoke temp$4.<java.lang.StringBuffer: java.lang.String toString()>();
        virtualinvoke this.<androidtests.Samples: void log(java.lang.String)>(temp$5);
        nop;
        temp$6 = interfaceinvoke c.<android.database.Cursor: boolean moveToNext()>();
        if temp$6 == 0 goto label2;

        goto label1;

     label2:
        nop;

     label3:
        nop;
        return;
    }

    private final boolean updateUser(android.database.sqlite.SQLiteDatabase)
    {
        androidtests.Samples this;
        android.database.sqlite.SQLiteDatabase mDb;
        boolean temp$0;

        this := @this: androidtests.Samples;
        mDb := @parameter0: android.database.sqlite.SQLiteDatabase;
        temp$0 = 0;
        return temp$0;
    }

    private final void log(java.lang.String)
    {
        androidtests.Samples this;
        java.lang.String app;

        this := @this: androidtests.Samples;
        app := @parameter0: java.lang.String;
        return;

        return;
    }

    public void <init>()
    {
        androidtests.Samples this;

        this := @this: androidtests.Samples;
        specialinvoke this.<java.lang.Object: void <init>()>();
        return;
    }
}
